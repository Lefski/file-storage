from database import SessionLocal
from models import User
import auth_utils

def create_test_users():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏"""
    db = SessionLocal()
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        test_users = [
            {
                "email": "admin@example.com",
                "username": "admin",
                "password": "admin123",
                "role": "admin"
            },
            {
                "email": "moderator@example.com", 
                "username": "moderator",
                "password": "moderator123",
                "role": "moderator"
            },
            {
                "email": "user@example.com",
                "username": "testuser", 
                "password": "user12345",
                "role": "user"
            },
            {
                "email": "test@example.com",
                "username": "testuser2",
                "password": "test12345", 
                "role": "user"
            }
        ]
        
        created_count = 0
        for user_data in test_users:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                existing_user = db.query(User).filter(
                    (User.email == user_data["email"]) | 
                    (User.username == user_data["username"])
                ).first()
                
                if not existing_user:
                    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                    hashed_password = auth_utils.get_password_hash(user_data["password"])
                    
                    user = User(
                        email=user_data["email"],
                        username=user_data["username"],
                        password_hash=hashed_password,
                        role=user_data["role"]
                    )
                    db.add(user)
                    created_count += 1
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['email']} —Å —Ä–æ–ª—å—é {user_data['role']}")
                    print(f"   –õ–æ–≥–∏–Ω: {user_data['email']}")
                    print(f"   –ü–∞—Ä–æ–ª—å: {user_data['password']}")
                else:
                    print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['email']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['email']}: {e}")
                continue
        
        db.commit()
        print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:")
        all_users = db.query(User).all()
        for user in all_users:
            print(f"   üë§ {user.username} ({user.email}) - —Ä–æ–ª—å: {user.role}")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    create_test_users()